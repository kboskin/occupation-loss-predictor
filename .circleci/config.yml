version: 2.1

orbs:
  python: circleci/python@2.0.3
  node: circleci/node@5.0.2

jobs:
  backend_validate:
    description: Validate Backend [Build, Lint, Test]
    working_directory: ~/occupation-loss-predictor/apps/backend
    executor: python/default
    steps:
      - checkout:
          path: ~/occupation-loss-predictor/
      - python/install-packages:
          pkg-manager: poetry
      - run:
          name: Install dependencies
          command: poetry install
      - run:
          name: Backend Build
          command: poetry build
      - run:
          name: Backend Lint
          command: poetry run flake8
      - run:
          name: Backend Test
          command: poetry run pytest

  frontend_validate:
    description: Validate Frontend [Build, Lint, Test]
    working_directory: ~/occupation-loss-predictor/apps/frontend
    executor: node/default
    steps:
      - checkout:
           path: ~/occupation-loss-predictor/
      - node/install-packages:
          pkg-manager: yarn
      - run:
          command: yarn build
          name: Build app
      - run:
          command: yarn lint
          name: Run linter
      - run:
          command: yarn test
          name: Run tests

  push_to_registry:
    description: "Pushing over to docker registry"
    machine:
      image: ubuntu-2204:2022.04.2
    steps:
      - checkout:
          path: ~/occupation-loss-predictor/
      - run:
          name: Push Backend Docker Image
          command: |
            cd ~/occupation-loss-predictor/apps/backend
            docker login -u ${GITHUB_USERNAME} -p ${GITHUB_TOKEN} ghcr.io
            docker build -t ghcr.io/kboskin/occupation-loss-predictor/backend:main .
            docker push ghcr.io/kboskin/occupation-loss-predictor/backend:main
      - run:
          name: Push Frontend Docker Image
          command: |
            cd ~/occupation-loss-predictor/apps/frontend
            docker login -u ${GITHUB_USERNAME} -p ${GITHUB_TOKEN} ghcr.io
            docker build -t ghcr.io/kboskin/occupation-loss-predictor/frontend:main .
            docker push ghcr.io/kboskin/occupation-loss-predictor/frontend:main

  prepare_infrastructure_prod:
    docker:
      - image: hashicorp/terraform:light
    working_directory: ~/occupation-loss-predictor/terraform
    steps:
      - checkout:
          path: ~/occupation-loss-predictor/
      - run:
          name: Prepare folders
          command: mkdir -p ~/occupation-loss-predictor/terraform/environments/prod
      - run:
          name: Variables
          command: echo $TERRAFORM_VARIABLES | base64 -d > ~/occupation-loss-predictor/terraform/environments/prod/terraform.tfvars
      - run:
          name: Credentials
          command: echo $CREDENTIALS_FILE | base64 -d > ~/occupation-loss-predictor/terraform/environments/prod/credentials.json
      - run:
          name: Export
          command: export GOOGLE_APPLICATION_CREDENTIALS="~/occupation-loss-predictor/terraform/environments/prod/credentials.json"
      - run:
          name: Initialize Terraform
          command: terraform init
      - run:
          name: Terraform Plan
          command: terraform plan
      - run:
          name: Terraform Apply
          command: terraform apply -var-file="~/occupation-loss-predictor/terraform/environments/prod/terraform.tfvars" -auto-approve
          
  prepare_infrastructure_dev:
    docker:
      - image: hashicorp/terraform:light
    working_directory: ~/occupation-loss-predictor/terraform
    steps:
      - checkout:
          path: ~/occupation-loss-predictor/
      - run:
          name: Export
          command: export GOOGLE_APPLICATION_CREDENTIALS="~/occupation-loss-predictor/terraform/environments/dev/credentials.json"
      - run:
          name: Initialize Terraform
          command: terraform init
      - run:
          name: Terraform Plan
          command: terraform plan
      - run:
          name: Terraform Apply
          command: terraform apply -var-file="~/occupation-loss-predictor/terraform/environments/dev/terraform.tfvars" -auto-approve


  deploy_all:
    machine:
      image: ubuntu-2204:2022.04.2
    steps:
      - run:
          name: Deploy Everything to the Server
          command: |
            'command -v ssh-agent >/dev/null || ( apk add --update openssh )'
            eval $(ssh-agent -s)
            echo "$AWS_KEY" | tr -d '\r' | ssh-add -
            mkdir -p ~/.ssh
            chmod 700 ~/.ssh
            ssh-keyscan $AWS_SERVER >> ~/.ssh/known_hosts
            chmod 644 ~/.ssh/known_hosts
            ssh $AWS_USER@$AWS_SERVER 'cd /app && docker compose down && docker compose pull && docker compose up -d db && docker compose up -d app && docker compose up -d frontend'

workflows:
  build_and_test:
    jobs:
      - backend_validate
      - frontend_validate
      - push_to_registry:
          requires:
            - backend_validate
            - frontend_validate
          filters:
            branches:
              only:
                - main
                - release/*
      - prepare_infrastructure_prod:
          requires:
            - push_to_registry
          filters:
            tags:
              only: /^v*/
            branches:
              only: main
      - prepare_infrastructure_dev:
          requires:
            - push_to_registry
          filters:
            branches:
              only: release/*
      - deploy_all:
          requires:
            - push_to_registry
            - prepare_infrastructure_prod
          filters:
            tags:
              only: /^v*/
            branches:
              only: main

