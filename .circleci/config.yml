version: 2.1

orbs:
  python: circleci/python@2.0.3
  node: circleci/node@5.0.2

jobs:
  backend_validate:
    description: Validate Backend [Build, Lint, Test]
    working_directory: ~/occupation-loss-predictor/apps/backend
    executor: python/default
    steps:
      - checkout:
          path: ~/occupation-loss-predictor/
      - python/install-packages:
          pkg-manager: poetry
      - run:
          name: Install dependencies
          command: poetry install
      - run:
          name: Backend Build
          command: poetry build
      - run:
          name: Backend Lint
          command: poetry run flake8
      - run:
          name: Backend Test
          command: poetry run pytest

  frontend_validate:
    description: Validate Frontend [Build, Lint, Test]
    working_directory: ~/occupation-loss-predictor/apps/frontend
    executor: node/default
    steps:
      - checkout:
           path: ~/occupation-loss-predictor/
      - node/install-packages:
          pkg-manager: yarn
      - run:
          command: |
            cd ~/occupation-loss-predictor/apps/frontend
            echo $FE_ENV_PROD | base64 -d > ~/occupation-loss-predictor/apps/frontend/.env
          name: Prepare env
      - run:
          command: yarn build
          name: Build app
      - run:
          command: yarn lint
          name: Run linter
      - run:
          command: yarn test
          name: Run tests

  push_to_registry_prod:
    description: "Pushing over to docker registry"
    machine:
      image: ubuntu-2204:2022.04.2
    steps:
      - checkout:
          path: ~/occupation-loss-predictor/
      - run:
          name: Push Backend Docker Image
          command: |
            cd ~/occupation-loss-predictor/apps/backend
            docker login -u ${GITHUB_USERNAME} -p ${GITHUB_TOKEN} ghcr.io
            docker build -t ghcr.io/kboskin/occupation-loss-predictor/backend:main .
            docker push ghcr.io/kboskin/occupation-loss-predictor/backend:main
      - run:
          name: Push Frontend Docker Image
          command: |
            cd ~/occupation-loss-predictor/apps/frontend
            echo $FE_ENV_PROD | base64 -d > ~/occupation-loss-predictor/apps/frontend/.env
            docker login -u ${GITHUB_USERNAME} -p ${GITHUB_TOKEN} ghcr.io
            docker build -t ghcr.io/kboskin/occupation-loss-predictor/frontend:main .
            docker push ghcr.io/kboskin/occupation-loss-predictor/frontend:main

  prepare_infrastructure_prod:
    docker:
      - image: hashicorp/terraform:light
    working_directory: ~/occupation-loss-predictor/terraform
    steps:
      - checkout:
          path: ~/occupation-loss-predictor/
      - run:
          name: Prepare folders
          command: mkdir -p ~/occupation-loss-predictor/terraform/environments/prod/
      - run:
          name: Terraform Variables
          command: |
            touch ~/occupation-loss-predictor/terraform/environments/prod/terraform.tfvars
            echo $TERRAFORM_VARIABLES | base64 -d > ~/occupation-loss-predictor/terraform/environments/prod/terraform.tfvars
      - run:
          name: SSH Keys
          command: |
            touch ~/occupation-loss-predictor/terraform/environments/prod/ssh.pub
            echo $SSH_PUB | base64 -d > ~/occupation-loss-predictor/terraform/environments/prod/ssh.pub
      - run:
          name: Terraform Credentials & Export
          command: |
            touch ~/occupation-loss-predictor/terraform/environments/prod/credentials.json
            echo $CREDENTIALS_FILE | base64 -d > ~/occupation-loss-predictor/terraform/environments/prod/credentials.json
            mkdir $HOME/.config/ && mkdir $HOME/.config/gcloud/
            echo $CREDENTIALS_FILE | base64 -d > $HOME/.config/gcloud/application_default_credentials.json
      - run:
          name: Initialize Terraform
          command: terraform init
      - run:
          name: Terraform Plan
          command: terraform plan -var-file="environments/prod/terraform.tfvars"
      - run:
          name: Terraform Apply
          command: terraform apply -var-file="environments/prod/terraform.tfvars" -auto-approve
          
  prepare_infrastructure_dev:
    docker:
      - image: hashicorp/terraform:light
    working_directory: ~/occupation-loss-predictor/terraform
    steps:
      - checkout:
          path: ~/occupation-loss-predictor/
      - run:
          name: Keys
          command: |
            touch ~/occupation-loss-predictor/terraform/environments/dev/ssh.pub
            echo $SSH_PUB_DEV | base64 -d > ~/occupation-loss-predictor/terraform/environments/dev/ssh.pub
      - run:
          name: Credentials & Export
          command: |
            echo $CREDENTIALS_FILE | base64 -d > $HOME/.config/gcloud/application_default_credentials.json
      - run:
          name: Initialize Terraform
          command: terraform init
      - run:
          name: Terraform Plan
          command: terraform plan -var-file="environments/dev/terraform.tfvars"
      - run:
          name: Terraform Apply
          command: terraform apply -var-file="environments/dev/terraform.tfvars" -auto-approve
          
          
  deploy_all_prod:
    machine:
      image: ubuntu-2204:2022.04.2
    steps:
      - run: 
           name: Metadata script delay (bad bad quick)
           command: sleep 120;
      - run:
          name: Configure SSH
          command: |
            command -v ssh-agent >/dev/null || ( sudo DEBIAN_FRONTEND=noninteractive apt-get update && sudo apt-get install -y openssh-client )
            eval $(ssh-agent -s)
            echo "$GCP_PR_KEY_PROD" | base64 --decode | tr -d '\r' | ssh-add -
            mkdir -p ~/.ssh
            chmod 700 ~/.ssh
            ssh-keyscan $GCP_SERVER_PROD >> ~/.ssh/known_hosts
            chmod 644 ~/.ssh/known_hosts
            SSH_PUT_CERTS="echo $CERT_PROD | base64 -d > /etc/letsencrypt/live/combatlosses.com/fullchain.pem && echo $CERT_PKEY_PROD | base64 -d > /etc/letsencrypt/live/combatlosses.com/privkey.pem"
            SSH_EXECUTE_SCRIPT_ENV="echo $LOSSES_ENV_PROD | base64 -d > /home/app/configs/backend/statshub/docker/losses.env && echo $FE_ENV_PROD | base64 -d > /home/app/configs/frontend/docker/frontend.env"
            SSH_EXECUTE_SCRIPT="docker login -u ${GITHUB_USERNAME} -p ${GITHUB_TOKEN} ghcr.io && cd /home/app && docker compose down && docker compose pull && docker compose up -d db && docker compose up -d app && docker compose up -d frontend && docker compose up -d nginx && docker system prune -af"
            ssh -o StrictHostKeyChecking=no $GCP_USER_PROD@$GCP_SERVER_PROD "${SSH_PUT_CERTS}"
            ssh -o StrictHostKeyChecking=no $GCP_USER_PROD@$GCP_SERVER_PROD "${SSH_EXECUTE_SCRIPT_ENV}"
            ssh -o StrictHostKeyChecking=no $GCP_USER_PROD@$GCP_SERVER_PROD "${SSH_EXECUTE_SCRIPT}"

workflows:
  build_and_test:
    jobs:
      - backend_validate
      - frontend_validate
      - push_to_registry_prod:
          requires:
            - backend_validate
            - frontend_validate
          filters:
            branches:
              only:
                - main
                - release/*
      - prepare_infrastructure_prod:
          requires:
            - push_to_registry_prod
          filters:
            tags:
              only: /^v*/
            branches:
              only: main
      - prepare_infrastructure_dev:
          requires:
            - push_to_registry_prod
          filters:
            branches:
              only: release/*
      - deploy_all_prod:
          requires:
            - push_to_registry_prod
            - prepare_infrastructure_prod
          filters:
            tags:
              only: /^v*/
            branches:
              only: main